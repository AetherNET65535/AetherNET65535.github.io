<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>aethernet-blog</title>
    <link href="https://aethernet65535.github.io/atom.xml" rel="self"/>
    <link href="https:&#x2F;&#x2F;aethernet65535.github.io"/>
    <updated>2025-06-05T10:03:27+0800</updated>
    <id>https:&#x2F;&#x2F;aethernet65535.github.io</id>

    
    
    
    
        
        <entry>
            <title>Personal journal</title>
            <link href="https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;journal&#x2F;"/>
            <updated>2019-10-05T00:00:00+0000</updated>
            <id>https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;journal&#x2F;</id>
            <content type="html">&amp;lt;h2 id=&amp;quot;2025-06-05&amp;quot;&amp;gt;2025&amp;#x2F;06&amp;#x2F;05&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Writting blog and studying xv6-2020 chapter-5 &amp;lt;code&amp;gt;Lazy Allocation&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;2025-01-01&amp;quot;&amp;gt;2025&amp;#x2F;01&amp;#x2F;01&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;START LEARNING PROGRAMMING FR, LEARNING &amp;lt;code&amp;gt;C&amp;lt;&amp;#x2F;code&amp;gt;.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
        </entry>
        
    
        
    
    
    
        
        
            
            <entry>
                <title>Language Learned</title>
                <link href="https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;language-learned&#x2F;"/>
                <updated>2025-06-05T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;language-learned&#x2F;</id>
                <content type="html">&amp;lt;h3 id=&amp;quot;learning&amp;quot;&amp;gt;Learning&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;C&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;RISC-V ASM&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h3 id=&amp;quot;might-learn&amp;quot;&amp;gt;Might Learn&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;C++&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Rust&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>XV6-2020 LAB1-UTIL</title>
                <link href="https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;xv6-2020-lab1-util&#x2F;"/>
                <updated>2025-06-04T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;xv6-2020-lab1-util&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;事先声明，我写的博客，操作基本都是在ARCH LINUX上实现的。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;这是XV6-2020的第一个LAB，主要是初步认识RISC-V版的XV6，然后为其实现一些用户态的小工具。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;boot-xv6-easy&amp;quot;&amp;gt;boot xv6 (easy)&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;首先，先下载&amp;lt;code&amp;gt;git&amp;lt;&amp;#x2F;code&amp;gt;，再&amp;lt;code&amp;gt;clone&amp;lt;&amp;#x2F;code&amp;gt;下来&amp;lt;code&amp;gt;xv6-labs-2020&amp;lt;&amp;#x2F;code&amp;gt;的文件。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;sh&amp;quot; class=&amp;quot;language-sh &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-sh&amp;quot; data-lang=&amp;quot;sh&amp;quot;&amp;gt;sudo pacman -S git

git clone git:&amp;amp;#x2F;&amp;amp;#x2F;g.csail.mit.edu&amp;amp;#x2F;xv6&amp;amp;#x2F;labs-2020
cd xv6-labs-2020
git checkout util
make clean &amp;amp;amp;&amp;amp;amp; make qemu
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;如果跑不了的话，可能是因为你的QEMU太新了，也有可能是其它问题。你可以试试给QEMU降级，或者去学习使用PODMAN或DOCKER（并不难）。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;sleep-easy&amp;quot;&amp;gt;sleep (easy)&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;在&amp;lt;code&amp;gt;user&amp;lt;&amp;#x2F;code&amp;gt;目录里，创建名为&amp;lt;code&amp;gt;sleep.c&amp;lt;&amp;#x2F;code&amp;gt;的文件。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;tree&amp;quot; class=&amp;quot;language-tree &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-tree&amp;quot; data-lang=&amp;quot;tree&amp;quot;&amp;gt;xv6-labs-2020&amp;amp;#x2F;
|-- user&amp;amp;#x2F;
|-- |-- sleep.c
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;调用sleep系统调用来实现这个功能。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;C&amp;quot; class=&amp;quot;language-C &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-C&amp;quot; data-lang=&amp;quot;C&amp;quot;&amp;gt;#include &amp;amp;quot;kernel&amp;amp;#x2F;types.h&amp;amp;quot;
#include &amp;amp;quot;kernel&amp;amp;#x2F;stat.h&amp;amp;quot;
#include &amp;amp;quot;user&amp;amp;#x2F;user.h&amp;amp;quot;

int main (int argc, char *argv[])
{
    &amp;amp;#x2F;&amp;amp;#x2F; 参数是否为2个？例子：sleep 10
    if (argc != 2)
    {
        fprintf (2, &amp;amp;quot;usage: sleep &amp;amp;lt;ticks&amp;amp;gt;\n&amp;amp;quot;);
        exit(1);
    }
    
    &amp;amp;#x2F;&amp;amp;#x2F; 把ASCII转为INT
    int ticks = atoi(argv[1]);
    &amp;amp;#x2F;&amp;amp;#x2F; int adjusted_ticks = ticks * 10; 这个别抄，作用是把CPU TICKS换成秒数 
    
    &amp;amp;#x2F;&amp;amp;#x2F; 如果用户输入的TICKS小于0，那就改为0（毕竟总不可能给你来个时间倒流）
    if (ticks &amp;amp;lt; 0)
    {
        ticks = 0;
    }

    sleep(ticks); &amp;amp;#x2F;&amp;amp;#x2F; 这里就是调用sleep，xv6已经写好sleep的实现了

    exit(0);
}
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;在&amp;lt;code&amp;gt;Makefile&amp;lt;&amp;#x2F;code&amp;gt;的&amp;lt;code&amp;gt;UPROGS&amp;lt;&amp;#x2F;code&amp;gt;处添加&amp;lt;code&amp;gt;$U&amp;#x2F;_sleep\&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;Makefile&amp;quot; class=&amp;quot;language-Makefile &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-Makefile&amp;quot; data-lang=&amp;quot;Makefile&amp;quot;&amp;gt;UPROGS=\
	$U&amp;amp;#x2F;_cat\
	$U&amp;amp;#x2F;_echo\
	$U&amp;amp;#x2F;_forktest\
	$U&amp;amp;#x2F;_grep\
	$U&amp;amp;#x2F;_init\
	$U&amp;amp;#x2F;_kill\
	$U&amp;amp;#x2F;_ln\
	$U&amp;amp;#x2F;_ls\
	$U&amp;amp;#x2F;_mkdir\
	$U&amp;amp;#x2F;_rm\
	$U&amp;amp;#x2F;_sh\
	$U&amp;amp;#x2F;_stressfs\
	$U&amp;amp;#x2F;_usertests\
	$U&amp;amp;#x2F;_grind\
	$U&amp;amp;#x2F;_wc\
	$U&amp;amp;#x2F;_zombie\
	$U&amp;amp;#x2F;_sleep\ # 加上这个
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;pingpong-easy&amp;quot;&amp;gt;pingpong (easy)&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;和上一个一样，先在&amp;lt;code&amp;gt;user&amp;lt;&amp;#x2F;code&amp;gt;目录里创建&amp;lt;code&amp;gt;pingpong.c&amp;lt;&amp;#x2F;code&amp;gt;文件。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;tree&amp;quot; class=&amp;quot;language-tree &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-tree&amp;quot; data-lang=&amp;quot;tree&amp;quot;&amp;gt;xv6-labs-2020&amp;amp;#x2F;
|-- user&amp;amp;#x2F;
|-- |-- sleep.c
|-- |-- pingpong.c
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;pre data-lang=&amp;quot;C&amp;quot; class=&amp;quot;language-C &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-C&amp;quot; data-lang=&amp;quot;C&amp;quot;&amp;gt;#include &amp;amp;quot;kernel&amp;amp;#x2F;types.h&amp;amp;quot;
#include &amp;amp;quot;kernel&amp;amp;#x2F;stat.h&amp;amp;quot;
#include &amp;amp;quot;user&amp;amp;#x2F;user.h&amp;amp;quot;

&amp;amp;#x2F;&amp;amp;#x2F; 给文件描述符起个更直观的别名	
#define READ 0
#define WRITE 1

int main (int argc, char *argv[])
{
    if (argc != 1)
    {
        fprintf(2, &amp;amp;quot;usage: pingpong\n&amp;amp;quot;);
        exit(1);
    }

    int pid, p2c[2], c2p[2];
    char signal = 0;
    
    pipe(p2c); &amp;amp;#x2F;&amp;amp;#x2F; 创建P2C管道，简称P（PARENT）
    pipe(c2p); &amp;amp;#x2F;&amp;amp;#x2F; 创建C2P管道，简称C（CHILD）

    if ((pid = fork()) &amp;amp;gt; 0) &amp;amp;#x2F;&amp;amp;#x2F; 父进程
    {
        &amp;amp;#x2F;&amp;amp;#x2F; 父进程只需要写P2C，读C2P
        close(p2c[READ]);
        close(c2p[WRITE]); 

        &amp;amp;#x2F;&amp;amp;#x2F; 发球：向子进程发送一个字节（触发子进程的read）
        write(p2c[WRITE], &amp;amp;amp;signal, 1);
        close(p2c[WRITE]);

        &amp;amp;#x2F;&amp;amp;#x2F; 等待接球：阻塞直到读取子进程的返回信号
        read(c2p[READ], &amp;amp;amp;signal, 1);
        close(c2p[READ]);

        printf(&amp;amp;quot;%d: Received Pong\n&amp;amp;quot;, getpid());
        
        exit(0); &amp;amp;#x2F;&amp;amp;#x2F; 关闭程序
    }
    else if (pid == 0) &amp;amp;#x2F;&amp;amp;#x2F; 子进程
    {
        &amp;amp;#x2F;&amp;amp;#x2F; 子进程只需要读P2C，写C2P
        close(c2p[READ]);
        close(p2c[WRITE]); 

        &amp;amp;#x2F;&amp;amp;#x2F; 等待接球：阻塞直到读取父进程的信号
        read(p2c[READ], &amp;amp;amp;signal, 1);
        close(p2c[READ]);

        printf(&amp;amp;quot;%d: Received Ping\n&amp;amp;quot;, getpid());
        
        &amp;amp;#x2F;&amp;amp;#x2F; 回球：向父进程返回一个字节
        write(c2p[WRITE], &amp;amp;amp;signal, 1); 
        close(c2p[WRITE]); 

        exit(0); &amp;amp;#x2F;&amp;amp;#x2F; 关闭子进程
    }
    else
    {
        fprintf(2, &amp;amp;quot;fork error\n&amp;amp;quot;);
        exit(1);
    }
}
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;上面的代码你可能看不懂，让我解释解释。
&amp;lt;br&amp;gt;
首先，当我们当前的进程&amp;lt;code&amp;gt;fork&amp;lt;&amp;#x2F;code&amp;gt;出了一个子进程后，这两个进程是并行的，就是他们是同时跑的。
&amp;lt;br&amp;gt;
但是我们希望这个代码是有顺序的，所以我们需要让其中一个不能跑。
&amp;lt;br&amp;gt;
我们在这里利用的是管道的堵塞机制，即“如果读取不到，就不执行下一个代码”。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;用乒乓球举例（我没打过，也不了解乒乓球）
&amp;lt;br&amp;gt;
乒乓球的桌子，上面有两个区域，一个是P区域，一个是C区域。
&amp;lt;br&amp;gt;
父亲站在P那里，他只可以把球打过去C那里，或者抓住飞到P区域的球。
&amp;lt;br&amp;gt;
一样的，儿子只能站在C那里，他只能把球打去P区域，或者抓住飞到C区域的球。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;当父亲还没有把球打给儿子时，儿子就不能抓住球，因为球没有飞向他。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h3 id=&amp;quot;chang-jian-yi-wen&amp;quot;&amp;gt;常见疑问&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Q: 为什么需要两个管道？&amp;lt;br &amp;#x2F;&amp;gt;
A: 管道是单向的，要实现双向通信必须用两个管道。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Q: &amp;lt;code&amp;gt;signal&amp;lt;&amp;#x2F;code&amp;gt;的作用是什么？&amp;lt;br &amp;#x2F;&amp;gt;
A: 实际不需要传输有效数据，只需通过管道的&amp;lt;strong&amp;gt;存在性&amp;lt;&amp;#x2F;strong&amp;gt;触发同步。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Q: 不关闭未使用的描述符会怎样？&amp;lt;br &amp;#x2F;&amp;gt;
A: 可能导致——子进程的&amp;lt;code&amp;gt;read&amp;lt;&amp;#x2F;code&amp;gt;无法收到EOF（因为父进程的写入端未关闭）&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;primes-moderate-hard&amp;quot;&amp;gt;primes(moderate)&amp;#x2F;(hard)&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;pre data-lang=&amp;quot;C&amp;quot; class=&amp;quot;language-C &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-C&amp;quot; data-lang=&amp;quot;C&amp;quot;&amp;gt;#include &amp;amp;quot;kernel&amp;amp;#x2F;types.h&amp;amp;quot;
#include &amp;amp;quot;kernel&amp;amp;#x2F;stat.h&amp;amp;quot;
#include &amp;amp;quot;user&amp;amp;#x2F;user.h&amp;amp;quot;

#define READ 0
#define WRITE 1

__attribute__((noreturn)) &amp;amp;#x2F;&amp;amp;#x2F; 没报递归警告的话就不用加
void sieve_algo (int left[2], int depth)
{
    close(left[WRITE]);

    int prime, temp, pid, right[2];
    
    &amp;amp;#x2F;&amp;amp;#x2F; 读取第一个数字
    if (read(left[READ], &amp;amp;amp;prime, sizeof(int)) == 0)
    {
        close(left[READ]);
        exit(0);
    }
    
    if (depth &amp;amp;gt; 15)
    {
        fprintf(2, &amp;amp;quot;error: stackoverflow\n&amp;amp;quot;);
        close(right[READ]);
        close(right[WRITE]);
        close(left[READ]);
        exit(1);
    }

    printf(&amp;amp;quot;prime: %d\n&amp;amp;quot;, prime);
    pipe(right);

    if ((pid = fork()) &amp;amp;gt; 0)
    {
        close(right[READ]);
        
        &amp;amp;#x2F;&amp;amp;#x2F; 筛选
        while(read(left[READ], &amp;amp;amp;temp, sizeof(int)))
        {
            if (temp % prime != 0)
            {
                if (write(right[WRITE], &amp;amp;amp;temp, sizeof(int)) != sizeof(int))
                {
                    fprintf(2, &amp;amp;quot;write error\n&amp;amp;quot;);
                }
            }
        }
        close(right[WRITE]);
        wait(0);
        exit(0);
    }
    else if (pid == 0)
    {
        close(left[READ]);
        close(right[WRITE]);
        sieve_algo(right, depth + 1);
        exit(0);
    }
    else
    {
        fprintf(2, &amp;amp;quot;fork error...\n&amp;amp;quot;);
        close(right[READ]);
        close(right[WRITE]);
        close(left[READ]);
        exit(1);
    }
}

int main(int argc, char* argv[])
{
    int pid, p[2];
    pipe(p); 

    if ((pid = fork()) &amp;amp;gt; 0) 
    {
        close(p[READ]);

        &amp;amp;#x2F;&amp;amp;#x2F; 把2到35一个一个写进去P管道
        for (int i = 2; i &amp;amp;lt;= 35; i++)
        {
            write(p[WRITE], &amp;amp;amp;i, sizeof(int));
        }

        &amp;amp;#x2F;&amp;amp;#x2F; P的工作正式结束
        close(p[WRITE]); 
        wait(0); &amp;amp;#x2F;&amp;amp;#x2F; 等待子进程结束
        exit(0); &amp;amp;#x2F;&amp;amp;#x2F; 退出程序
    }
    else if (pid == 0)  &amp;amp;#x2F;&amp;amp;#x2F; 子进程
    {
        sieve_algo(p, 1); 
        exit(0);
    }
    else
    {
        fprintf(2, &amp;amp;quot;fork error\n&amp;amp;quot;);
        exit(1);
    }
}
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;chang-jian-yi-wen-1&amp;quot;&amp;gt;常见疑问&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Q：为什么&amp;lt;code&amp;gt;sieve_algo&amp;lt;&amp;#x2F;code&amp;gt;函数里，子进程不等待父进程就直接进入递归？&amp;lt;br &amp;#x2F;&amp;gt;
A：因为在&amp;lt;code&amp;gt;sieve_algo&amp;lt;&amp;#x2F;code&amp;gt;的某段代码，会让子进程被堵塞，但是此时父进程还没有关闭输入端，所以子进程只会堵塞，不会报错。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;C&amp;quot; class=&amp;quot;language-C &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-C&amp;quot; data-lang=&amp;quot;C&amp;quot;&amp;gt;if (read(left[READ], &amp;amp;amp;prime, sizeof(int)) == 0) &amp;amp;#x2F;&amp;amp;#x2F; 这里会堵塞
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h2 id=&amp;quot;find-moderate&amp;quot;&amp;gt;find (moderate)&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;说实话，这个其实不难，基本上CV再改改就行了。&amp;lt;br &amp;#x2F;&amp;gt;
但是，如果你不知道怎么做的话，你得先去看看&amp;lt;code&amp;gt;user&amp;#x2F;ls.c&amp;lt;&amp;#x2F;code&amp;gt;，还有&amp;lt;code&amp;gt;kernel&amp;#x2F;fs.h&amp;lt;&amp;#x2F;code&amp;gt;的一部分，先看懂这几个再想要怎么做。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;C&amp;quot; class=&amp;quot;language-C &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-C&amp;quot; data-lang=&amp;quot;C&amp;quot;&amp;gt;#include &amp;amp;quot;kernel&amp;amp;#x2F;types.h&amp;amp;quot;
#include &amp;amp;quot;kernel&amp;amp;#x2F;stat.h&amp;amp;quot;
#include &amp;amp;quot;kernel&amp;amp;#x2F;fs.h&amp;amp;quot;
#include &amp;amp;quot;user&amp;amp;#x2F;user.h&amp;amp;quot;
#include &amp;amp;quot;kernel&amp;amp;#x2F;fcntl.h&amp;amp;quot;
char *
fmtname (char *path)
{
  char *p;

  for (p = path + strlen (path); p &amp;amp;gt;= path &amp;amp;amp;&amp;amp;amp; *p != &amp;amp;#x27;&amp;amp;#x2F;&amp;amp;#x27;; --p)
    ;
  return p + 1;
}

void
find (char *path, char *filename)
{
  char buf[512], *p;
  int fd;
  struct stat st;
  struct dirent de;

  if ((fd = open (path, 0)) &amp;amp;lt; 0)
  {
    fprintf (2, &amp;amp;quot;find: cannot open %s\n&amp;amp;quot;, path);
    return;
  }

  if (fstat (fd, &amp;amp;amp;st) &amp;amp;lt; 0)
  {
    fprintf (2, &amp;amp;quot;find: cannot stat %s\n&amp;amp;quot;, path);
    close (fd);
    return;
  }

  switch (st.type)
  {
    case T_FILE:
      if (strcmp (fmtname (path), filename) == 0)
      {
        printf (&amp;amp;quot;%s\n&amp;amp;quot;, path);
      }
      break;

    case T_DIR:
      strcpy (buf, path);
      p = buf + strlen (buf);
      *p++ = &amp;amp;#x27;&amp;amp;#x2F;&amp;amp;#x27;;

      while (read (fd, &amp;amp;amp;de, sizeof (de)) == sizeof (de))
      {
        if (de.inum == 0 || strcmp (de.name, &amp;amp;quot;.&amp;amp;quot;) == 0
          || strcmp (de.name, &amp;amp;quot;..&amp;amp;quot;) == 0)
          continue;

        memmove (p, de.name, DIRSIZ);
        p[DIRSIZ] = 0;
        find (buf, filename);
      }
      break;
    default:
      break;
  }
  close (fd);
}

int
main (int argc, char *argv[])
{
  if (argc &amp;amp;lt; 3)
  {
    fprintf (2, &amp;amp;quot;usage: find &amp;amp;lt;start_path&amp;amp;gt; &amp;amp;lt;file_name&amp;amp;gt;\n&amp;amp;quot;);
    exit (0);
  }
  find (argv[1], argv[2]);
  exit (0);
}
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;h3 id=&amp;quot;chang-jian-yi-wen-2&amp;quot;&amp;gt;常见疑问&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;p&amp;gt;Q：为什么&amp;lt;code&amp;gt;p == path - 1&amp;lt;&amp;#x2F;code&amp;gt;不会报错？&amp;lt;br &amp;#x2F;&amp;gt;
A：因为没有解引用，只是存储那个地址是被允许的。&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Q：&amp;lt;code&amp;gt;T_DIR&amp;lt;&amp;#x2F;code&amp;gt;的那部分&amp;lt;code&amp;gt;while&amp;lt;&amp;#x2F;code&amp;gt;循环是怎么运作的？&amp;lt;br &amp;#x2F;&amp;gt;
A：每当你使用&amp;lt;code&amp;gt;read&amp;lt;&amp;#x2F;code&amp;gt;成功读取了N个字节后，&amp;lt;code&amp;gt;fd&amp;lt;&amp;#x2F;code&amp;gt;的文件偏移量就会增加N个字节。简单来说就是，读取成功后&amp;lt;code&amp;gt;fd&amp;lt;&amp;#x2F;code&amp;gt;就会跳到下一个。&amp;lt;br &amp;#x2F;&amp;gt;
ps：我自己也不是很清楚，写到这里时，我的进度只是LAB5: LAZY ALLOCATION而已，LAB9才是FILE SYSTEM，可能到时候就能理解了&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Post Example With Headings And Toc</title>
                <link href="https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;post-example-with-headings-and-toc&#x2F;"/>
                <updated>2024-01-01T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;post-example-with-headings-and-toc&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Nunc a egestas tortor, sed feugiat leo.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;p&amp;gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Nunc a egestas tortor, sed feugiat leo. Vestibulum porta tincidunt tellus, vitae ornare tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed nunc neque, tempor in iaculis non, faucibus et metus. Etiam id nisl ut lorem gravida euismod.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-start&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;aethernet65535.github.io&amp;#x2F;blog&amp;#x2F;post-example-with-headings-and-toc&amp;#x2F;#the-start&amp;quot;&amp;gt;The start&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Fusce non velit cursus ligula mattis convallis vel at metus. Sed pharetra tellus massa, non elementum eros vulputate non. Suspendisse potenti. Quisque arcu felis, laoreet vel accumsan sit amet, fermentum at nunc. Sed massa quam, auctor in eros quis, porttitor tincidunt orci. Nulla convallis id sapien ornare viverra. Cras nec est lacinia ligula porta tincidunt. Nam a est eget ligula pellentesque posuere. Maecenas quis enim ac risus accumsan scelerisque. Aliquam vitae libero sapien. Etiam convallis, metus nec suscipit condimentum, quam massa congue velit, sit amet sollicitudin nisi tortor a lectus. Cras a arcu enim. Suspendisse hendrerit euismod est ac gravida. Donec vitae elit tristique, suscipit eros at, aliquam augue. In ac faucibus dui. Sed tempor lacus tristique elit sagittis, vitae tempor massa convallis.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-middle&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;aethernet65535.github.io&amp;#x2F;blog&amp;#x2F;post-example-with-headings-and-toc&amp;#x2F;#the-middle&amp;quot;&amp;gt;The middle&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Proin quis velit et eros auctor laoreet. Aenean eget nibh odio. Suspendisse mollis enim pretium, fermentum urna vitae, egestas purus. Donec convallis tincidunt purus, scelerisque fermentum eros sagittis vel. Aliquam ac aliquet risus, tempus iaculis est. Fusce molestie mauris non interdum hendrerit. Curabitur ullamcorper, eros vitae interdum volutpat, lacus magna lacinia turpis, at accumsan dui tortor vel lectus. Aenean risus massa, semper non lectus rutrum, facilisis imperdiet mi. Praesent sed quam quis purus auctor ornare et sed augue. Vestibulum non quam quis ligula luctus placerat sed sit amet erat. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Fusce auctor, sem eu volutpat dignissim, turpis nibh malesuada arcu, in consequat elit mauris quis sem. Nam tristique sit amet enim vel accumsan. Sed id nibh commodo, dictum sem id, semper quam.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;the-end&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;https:&amp;#x2F;&amp;#x2F;aethernet65535.github.io&amp;#x2F;blog&amp;#x2F;post-example-with-headings-and-toc&amp;#x2F;#the-end&amp;quot;&amp;gt;The end&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Donec ex lectus, tempus non lacinia quis, pretium non ipsum. Praesent est nunc, rutrum vel tellus eu, tristique laoreet purus. In rutrum orci sit amet ex ornare, sit amet finibus lacus laoreet. Etiam ac facilisis purus, eget porttitor odio. Suspendisse tempus dolor nec risus sodales posuere. Proin dui dui, mollis a consectetur molestie, lobortis vitae tellus. Vivamus at purus sed urna sollicitudin mattis. Mauris lacinia libero in lobortis pulvinar. Nullam sit amet condimentum justo. Donec orci justo, pharetra ut dolor non, interdum finibus orci. Proin vitae ante a dui sodales commodo ac id elit. Nunc vel accumsan nunc, sit amet congue nunc. Aliquam in lacinia velit. Integer lobortis luctus eros, in fermentum metus aliquet a. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Very Very Very Long Title And Very Very Very Short Content</title>
                <link href="https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;very-very-very-long-title-and-very-very-very-short-content&#x2F;"/>
                <updated>2024-01-01T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;very-very-very-long-title-and-very-very-very-short-content&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque vel lacinia neque. Praesent nulla quam, ullamcorper in sollicitudin ac, molestie sed justo. Cras aliquam, sapien id consectetur accumsan, augue magna faucibus ex, ut ultricies turpis tortor vel ante. In at rutrum tellus. Nullam vestibulum metus eu purus malesuada, volutpat mattis leo facilisis.&amp;lt;&amp;#x2F;p&amp;gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Overview Post</title>
                <link href="https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;overview-post&#x2F;"/>
                <updated>2020-07-07T00:00:00+0000</updated>
                <id>https:&#x2F;&#x2F;aethernet65535.github.io&#x2F;blog&#x2F;overview-post&#x2F;</id>
                <content type="html">&amp;lt;p&amp;gt;Lorem ipsum&amp;lt;sup class=&amp;quot;footnote-reference&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#1&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;sup&amp;gt; dolor sit amet, consectetur adipiscing elit. Pellentesque vel lacinia neque. Praesent nulla quam, ullamcorper in sollicitudin ac, molestie sed justo. Cras aliquam, sapien id consectetur accumsan, augue magna faucibus ex, ut ultricies turpis tortor vel ante. In at rutrum tellus.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h1 id=&amp;quot;sample-heading-1&amp;quot;&amp;gt;Sample heading 1&amp;lt;&amp;#x2F;h1&amp;gt;
&amp;lt;h2 id=&amp;quot;sample-heading-2&amp;quot;&amp;gt;Sample heading 2&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;h3 id=&amp;quot;sample-heading-3&amp;quot;&amp;gt;Sample heading 3&amp;lt;&amp;#x2F;h3&amp;gt;
&amp;lt;h4 id=&amp;quot;sample-heading-4&amp;quot;&amp;gt;Sample heading 4&amp;lt;&amp;#x2F;h4&amp;gt;
&amp;lt;h5 id=&amp;quot;sample-heading-5&amp;quot;&amp;gt;Sample heading 5&amp;lt;&amp;#x2F;h5&amp;gt;
&amp;lt;h6 id=&amp;quot;sample-heading-6&amp;quot;&amp;gt;Sample heading 6&amp;lt;&amp;#x2F;h6&amp;gt;
&amp;lt;p&amp;gt;Mauris viverra dictum ultricies. Vestibulum quis ipsum euismod, facilisis metus sed, varius ipsum. Donec scelerisque lacus libero, eu dignissim sem venenatis at. Etiam id nisl ut lorem gravida euismod.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;lists&amp;quot;&amp;gt;Lists&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Unordered:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Fusce non velit cursus ligula mattis convallis vel at metus&amp;lt;sup class=&amp;quot;footnote-reference&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#2&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;sup&amp;gt;.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Sed pharetra tellus massa, non elementum eros vulputate non.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Suspendisse potenti.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;p&amp;gt;Ordered:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Quisque arcu felis, laoreet vel accumsan sit amet, fermentum at nunc.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Sed massa quam, auctor in eros quis, porttitor tincidunt orci.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Nulla convallis id sapien ornare viverra.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;li&amp;gt;Nam a est eget ligula pellentesque posuere.&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ol&amp;gt;
&amp;lt;h2 id=&amp;quot;blockquote&amp;quot;&amp;gt;Blockquote&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;The following is a blockquote:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Suspendisse tempus dolor nec risus sodales posuere. Proin dui dui, mollis a consectetur molestie, lobortis vitae tellus.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;blockquote&amp;gt;
&amp;lt;h2 id=&amp;quot;code&amp;quot;&amp;gt;Code&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Now some code:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;pre data-lang=&amp;quot;js&amp;quot; class=&amp;quot;language-js &amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-js&amp;quot; data-lang=&amp;quot;js&amp;quot;&amp;gt;const ultimateTruth = &amp;amp;#x27;this theme is the best!&amp;amp;#x27;;
console.log(ultimateTruth);
&amp;lt;&amp;#x2F;code&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;
&amp;lt;p&amp;gt;And here is some &amp;lt;code&amp;gt;inline code&amp;lt;&amp;#x2F;code&amp;gt;!&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;tables&amp;quot;&amp;gt;Tables&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;p&amp;gt;Now a table:&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Tables&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th style=&amp;quot;text-align: center&amp;quot;&amp;gt;Are&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;th style=&amp;quot;text-align: right&amp;quot;&amp;gt;Cool&amp;lt;&amp;#x2F;th&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;&amp;lt;&amp;#x2F;thead&amp;gt;&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;col 3 is&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td style=&amp;quot;text-align: center&amp;quot;&amp;gt;right-aligned&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td style=&amp;quot;text-align: right&amp;quot;&amp;gt;$1600&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;col 2 is&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td style=&amp;quot;text-align: center&amp;quot;&amp;gt;centered&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td style=&amp;quot;text-align: right&amp;quot;&amp;gt;$12&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;zebra stripes&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td style=&amp;quot;text-align: center&amp;quot;&amp;gt;are neat&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;td style=&amp;quot;text-align: right&amp;quot;&amp;gt;$1&amp;lt;&amp;#x2F;td&amp;gt;&amp;lt;&amp;#x2F;tr&amp;gt;
&amp;lt;&amp;#x2F;tbody&amp;gt;&amp;lt;&amp;#x2F;table&amp;gt;
&amp;lt;h2 id=&amp;quot;images&amp;quot;&amp;gt;Images&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;div &amp;gt;
  &amp;lt;img src=&amp;quot;https:&amp;amp;#x2F;&amp;amp;#x2F;uploads-ssl.webflow.com&amp;amp;#x2F;5ff0b3326e5782a256714165&amp;amp;#x2F;638b6f3a3d8d2e6bad1cb03b_Random22.1.jpg&amp;quot; alt=&amp;quot;theme logo&amp;quot;&amp;gt;
  
&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;p&amp;gt;random image of a dog&amp;lt;sup class=&amp;quot;footnote-reference&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#4&amp;quot;&amp;gt;3&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;sup&amp;gt;&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;h2 id=&amp;quot;multilanguage-support&amp;quot;&amp;gt;Multilanguage support&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;🥣 &amp;lt;a href=&amp;quot;&amp;#x2F;fr&amp;quot;&amp;gt;This site but in french (only this page and the homepage is translated)&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;h2 id=&amp;quot;webrings&amp;quot;&amp;gt;Webrings&amp;lt;&amp;#x2F;h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;🈯 &amp;lt;span class=&amp;quot;webring&amp;quot;&amp;gt;
&amp;lt;a class=&amp;quot;no-style&amp;quot; href=#&amp;gt;&amp;lt;svg class=&amp;quot;icon&amp;quot;&amp;gt;&amp;lt;use href=&amp;quot;https:&amp;#x2F;&amp;#x2F;aethernet65535.github.io&amp;#x2F;icons.svg#chevronLeft&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;use&amp;gt;&amp;lt;&amp;#x2F;svg&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt; 
&amp;lt;a href=#&amp;gt;Random Webring&amp;lt;&amp;#x2F;a&amp;gt; 
&amp;lt;a class=&amp;quot;no-style&amp;quot; href=#&amp;gt;&amp;lt;svg class=&amp;quot;icon&amp;quot;&amp;gt;&amp;lt;use href=&amp;quot;https:&amp;#x2F;&amp;#x2F;aethernet65535.github.io&amp;#x2F;icons.svg#chevronRight&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;use&amp;gt;&amp;lt;&amp;#x2F;svg&amp;gt;&amp;lt;&amp;#x2F;a&amp;gt;&amp;lt;&amp;#x2F;span&amp;gt;
&amp;lt;&amp;#x2F;li&amp;gt;
&amp;lt;&amp;#x2F;ul&amp;gt;
&amp;lt;hr &amp;#x2F;&amp;gt;
&amp;lt;div class=&amp;quot;footnote-definition&amp;quot; id=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;sup class=&amp;quot;footnote-definition-label&amp;quot;&amp;gt;1&amp;lt;&amp;#x2F;sup&amp;gt;
&amp;lt;p&amp;gt;this is a footnote. It should highlight if you click on the corresponding superscript number.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;div class=&amp;quot;footnote-definition&amp;quot; id=&amp;quot;2&amp;quot;&amp;gt;&amp;lt;sup class=&amp;quot;footnote-definition-label&amp;quot;&amp;gt;2&amp;lt;&amp;#x2F;sup&amp;gt;
&amp;lt;p&amp;gt;hey there&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;div class=&amp;quot;footnote-definition&amp;quot; id=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;sup class=&amp;quot;footnote-definition-label&amp;quot;&amp;gt;4&amp;lt;&amp;#x2F;sup&amp;gt;
&amp;lt;p&amp;gt;this is another footnote.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;
&amp;lt;div class=&amp;quot;footnote-definition&amp;quot; id=&amp;quot;4&amp;quot;&amp;gt;&amp;lt;sup class=&amp;quot;footnote-definition-label&amp;quot;&amp;gt;3&amp;lt;&amp;#x2F;sup&amp;gt;
&amp;lt;p&amp;gt;this is a very very long footnote to test if a very very long footnote brings some problems or not. I strongly hope that there are no problems but you know sometimes problems arise from nowhere.&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;div&amp;gt;
</content>
            </entry>
            
        
    
</feed>
